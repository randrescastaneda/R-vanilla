"Hmisc",
"htmlTable",
"htmltools",
"htmlwidgets",
"httpuv",
"httr",
"httr2",
"hunspell",
"huxtable",
"HyperbolicDist",
"iBreakDown",
"igraph",
"import",
"infer",
"insight",
"interp",
"Iso",
"ISOcodes",
"jqr",
"jsonlite",
"kableExtra",
"kit",
"klaR",
"kml",
"knitr",
"ks",
"kSamples",
"labeling",
"laeken",
"later",
"lava",
"ldbounds",
"leaflet",
"leaflet.providers",
"learnr",
"libcoin",
"limSolve",
"lintr",
"listenv",
"listviewer",
"lme4",
"lmom",
"longitudinalData",
"loo",
"lpSolve",
"lpSolveAPI",
"lubridate",
"lwgeom",
"magick",
"maps",
"markdown",
"Matrix",
"MatrixModels",
"matrixStats",
"mclust",
"mcmc",
"MCMCpack",
"metap",
"mgcv",
"mhsmm",
"miceadds",
"minpack.lm",
"minqa",
"mlr3",
"mlr3misc",
"mmap",
"mockery",
"modelbased",
"modeldata",
"mosaic",
"mosaicCore",
"mosaicData",
"MplusAutomation",
"multicool",
"mvtnorm",
"ncdf4",
"network",
"nleqslv",
"nnls",
"nomnoml",
"officer",
"openssl",
"ordinal",
"packrat",
"pak",
"paletteer",
"palr",
"pals",
"pan",
"parallelly",
"parameters",
"parsnip",
"party",
"patchwork",
"pcaPP",
"pdftools",
"pegas",
"Peptides",
"performance",
"phonTools",
"phylobase",
"phylosignal",
"phytools",
"pingr",
"pins",
"pkgbuild",
"pkgload",
"plot3D",
"plotly",
"plotmo",
"plotrix",
"pls",
"plyr",
"PMCMRplus",
"polyclip",
"posterior",
"poweRlaw",
"pracma",
"prettymapr",
"prettyunits",
"pROC",
"processx",
"prodlim",
"progress",
"progressr",
"promises",
"protolite",
"proxyC",
"ps",
"PSCBS",
"pscl",
"psych",
"qs",
"quantmod",
"quantreg",
"quarto",
"R.devices",
"R.filesets",
"R.huge",
"R.oo",
"R.rsp",
"R.utils",
"R2jags",
"R2WinBUGS",
"radiant.data",
"ragg",
"rainbow",
"ranger",
"raster",
"rbibutils",
"Rborist",
"Rcpp",
"RcppArmadillo",
"RcppEigen",
"RCurl",
"Rdpack",
"reactR",
"readODS",
"readr",
"readtext",
"recipes",
"ReDaMoR",
"redoc",
"rematch",
"renv",
"report",
"reprex",
"reticulate",
"Rfast",
"rgenoud",
"rgl",
"Rglpk",
"RgoogleMaps",
"rintrojs",
"rio",
"rjags",
"rJava",
"RJSONIO",
"rlecuyer"
))
install.packages(c("acepack", "actuar", "adegraphics", "adephylo", "afex", "agricolae", "airGR", "alabama", "antaresRead", "antiword", "aroma.affymetrix", "aroma.core", "arrow", "askpass", "audio", "av", "BayesFactor", "bayesplot", "bayestestR", "BH", "bigmemory", "bigmemory.sri", "BiocManager", "blastula", "blogdown", "bookdown", "brew", "brio", "bs4Dash", "bslib", "BsMD", "BWStest", "Cairo", "callr", "capushe", "charlatan", "checkmate", "circlize", "circular", "classInt", "cli", "clue", "clusterGeneration", "clustermq", "clv", "coda", "coin", "colourpicker", "commonmark", "coneproj", "config", "convey", "covr", "cowplot", "cpp11", "credentials", "crosstalk", "curl", "cyclocomp", "daewr", "data.table", "data.tree", "DataExplorer", "datamods", "DataVisualizations", "datawizard", "DBI", "dbplyr", "dbscan", "ddalpha", "deldir", "DEoptimR", "DescTools", "deSolve", "devEMF", "DiagrammeR", "dials", "DiceDesign", "digest", "directlabels", "distill", "distr", "distributional", "dm", "DoE.base", "dotCall64", "dplyr", "drake", "drat", "DT", "duckdb", "e1071", "earth", "easystats", "eddington", "emayili", "emmeans", "emplik", "EnvStats", "errorist", "esquisse", "estimability", "evaluate", "expm", "extraDistr", "FactoMineR", "fansi", "fastcluster", "fastICA", "fastmatch", "fastverse", "fields", "filelock", "flexdashboard", "flextable", "FNN", "fontawesome", "forecast", "fracdiff", "FrF2", "fstcore", "future", "future.apply", "future.callr", "gam", "gamlss", "gamlss.dist", "gdata", "gdtools", "gee", "geepack", "geojson", "geojsonio", "geometries", "gert", "getPass", "ggcorrplot", "ggdendro", "ggdist", "ggExtra", "ggforce", "ggformula", "ggfun", "gghighlight", "GGIR", "ggiraph", "GGIRread", "ggmap", "ggplot2", "ggplotify", "ggrepel", "ggridges", "ggside", "ggspatial", "ggstatsplot", "ggthemes", "ggvis", "gifski", "git2r", "gittargets", "glmnet", "glue", "gmp", "googlePolylines", "googleway", "gplots", "graphlayouts", "grImport2", "gt", "gtable", "gtools", "hardhat", "haven", "heplots", "HH", "Hmisc", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "hunspell", "huxtable", "HyperbolicDist", "iBreakDown", "igraph", "import", "infer", "insight", "interp", "Iso", "ISOcodes", "jqr", "jsonlite", "kableExtra", "kit", "klaR", "kml", "knitr", "ks", "kSamples", "labeling", "laeken", "later", "lava", "ldbounds", "leaflet", "leaflet.providers", "learnr", "libcoin", "limSolve", "lintr", "listenv", "listviewer", "lme4", "lmom", "longitudinalData", "loo", "lpSolve", "lpSolveAPI", "lubridate", "lwgeom", "magick", "maps", "markdown", "Matrix", "MatrixModels", "matrixStats", "mclust", "mcmc", "MCMCpack", "metap", "mgcv", "mhsmm", "miceadds", "minpack.lm", "minqa", "mlr3", "mlr3misc", "mmap", "mockery", "modelbased", "modeldata", "mosaic", "mosaicCore", "mosaicData", "MplusAutomation", "multicool", "mvtnorm", "ncdf4", "network", "nleqslv", "nnls", "nomnoml", "officer", "openssl", "ordinal", "packrat", "pak", "paletteer", "palr", "pals", "pan", "parallelly", "parameters", "parsnip", "party", "patchwork", "pcaPP", "pdftools", "pegas", "Peptides", "performance", "phonTools", "phylobase", "phylosignal", "phytools", "pingr", "pins", "pkgbuild", "pkgload", "plot3D", "plotly", "plotmo", "plotrix", "pls", "plyr", "PMCMRplus", "polyclip", "posterior", "poweRlaw", "pracma", "prettymapr", "prettyunits", "pROC", "processx", "prodlim", "progress", "progressr", "promises", "protolite", "proxyC", "ps", "PSCBS", "pscl", "psych", "qs", "quantmod", "quantreg", "quarto", "R.devices", "R.filesets", "R.huge", "R.oo", "R.rsp", "R.utils", "R2jags", "R2WinBUGS", "radiant.data", "ragg", "rainbow", "ranger", "raster", "rbibutils", "Rborist", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "Rdpack", "reactR", "readODS", "readr", "readtext", "recipes", "ReDaMoR", "redoc", "rematch", "renv", "report", "reprex", "reticulate", "Rfast", "rgenoud", "rgl", "Rglpk", "RgoogleMaps", "rintrojs", "rio", "rjags", "rJava", "RJSONIO", "rlecuyer"))
pushoverr::pushover("finished updating packages")
install.packages(
c(
"RMariaDB",
"rmarkdown",
"Rmpfr",
"rnaturalearth",
"rnaturalearthdata",
"robust",
"robustbase",
"rootSolve",
"rosm",
"roxygen2",
"roxygen2md",
"rprojroot",
"rrcov",
"rsample",
"rsconnect",
"RSQLite",
"rstan",
"rstanarm",
"rstantools",
"rsvg",
"rticles",
"rtweet",
"rvest",
"rworldmap",
"s2",
"sandwich",
"sass",
"scales",
"scico",
"searcher",
"see",
"seewave",
"segmented",
"seqinr",
"servr",
"sets",
"sf",
"sfheaders",
"sfsmisc",
"shape",
"shiny",
"shinybusy",
"shinyWidgets",
"signal",
"slider",
"SMPracticals",
"sna",
"snakecase",
"snowfall",
"sodium",
"sp",
"spacetime",
"spacyr",
"spam",
"sparklyr",
"spatstat",
"spatstat.data",
"spatstat.explore",
"spatstat.geom",
"spatstat.linnet",
"spatstat.model",
"spatstat.random",
"spatstat.sparse",
"spatstat.utils",
"spdep",
"splancs",
"splus2R",
"spMaps",
"StanHeaders",
"stars",
"startupmsg",
"statar",
"statsExpressions",
"stringdist",
"stringfish",
"stringi",
"stringr",
"striprtf",
"styler",
"svd",
"svglite",
"systemfonts",
"tarchetypes",
"targets",
"TeachingDemos",
"tensorA",
"terra",
"tesseract",
"testthat",
"texreg",
"textshaping",
"tgp",
"themis",
"tidybayes",
"tidyfast",
"tidygraph",
"tidymodels",
"tidyposterior",
"tidyr",
"timechange",
"timeDate",
"timetk",
"tinytex",
"TMB",
"trend",
"tseries",
"tsfeatures",
"TTR",
"tune",
"tuneR",
"tweenr",
"ucminf",
"unitizer",
"units",
"unmarked",
"usethis",
"utf8",
"uuid",
"V8",
"vcd",
"vctrs",
"vegawidget",
"VGAM",
"viridis",
"vitae",
"vroom",
"waldo",
"warp",
"webp",
"webutils",
"wesanderson",
"withr",
"wk",
"workflows",
"writexl",
"WRS2",
"xaringan",
"xfun",
"xgboost",
"XLConnect",
"XML",
"xml2",
"xts",
"yaImpute",
"yaml",
"yardstick",
"yulab.utils",
"zip"
)
install.packages(c("cli", "data.table", "digest", "dplyr", "fansi", "gert", "glue", "igraph", "jsonlite", "openssl", "processx", "ps", "stringi", "utf8", "uuid", "vctrs", "xfun", "xml2", "yaml"))
install.packages("igraph")
file.edit("~/.Renviron")
Sys.getenv(
"R_LIBS_USER"
)
Sys.getenv(
"R_LIBS_USER"
)
install.packages("igraph")
Sys.getenv("R_LIBS_USER")
libuse <- Sys.getenv("R_LIBS_USER") |>
fs::path_dir()
libuse
vers <- libuse |>
fs::dir_ls(type = "dir",
recurse = FALSE) |>
fs::path_file()
vers
old_dir  <- libuse |>
fs::path(vers[length(vers) - 1])
old_dir
old_dir <- "C:/Users/wb384996/R/win-library/" |>
fs::path()
vers
old_dir <- "C:/Users/wb384996/R/win-library/" |>
fs::path(vers[1])
old_dir
old <- old_dir |>
fs::dir_ls(type = "dir") |>
fs::path_file()
old
libuse <- Sys.getenv("R_LIBS_USER") |>
fs::path_dir()
new_dir <- libuse |>
fs::path(vers[length(vers)])
new_dir
new <- new_dir |>
fs::dir_ls(type = "dir") |>
fs::path_file()
new
pkg <- setdiff(old, new)
ls <- pak::lib_status(lib = old_dir) |>
{\(.) .[.$package %in% pkg, ]}()
ls
pak::pak("pillar")
pak::pak_install_extra()
pkg <- setdiff(old, new)
ls <- pak::lib_status(lib = old_dir) |>
{\(.) .[.$package %in% pkg, ]}()
ls
from_gh <- ls[!is.na(ls$remoteusername),] |>
{\(.) fs::path(.$remoteusername,  .$remoterepo)}()
from_gh
# from CRAN
from_cran <- ls[ls$repository == "CRAN", "package"]
pkgs <- c(from_gh, from_cran) |>
{\(.) .[!is.na(.)]}()
get package to be installed
# get package to be installed
pkgs <- c(from_gh, from_cran) |>
{\(.) .[!is.na(.)]}()
ps_pi <- purrr::possibly(pak::pak,
otherwise = NULL)
pi    <- purrr::map(pkgs, ps_pi, ask = FALSE)
names(pi) <- pkgs
# packages that failed
pi |>
purrr::keep(is.null) |>
names()
libuse <- Sys.getenv("R_LIBS_USER") |>
fs::path_dir()
vers <- libuse |>
fs::dir_ls(type = "dir",
recurse = FALSE) |>
fs::path_file()
old_dir  <- libuse |>
fs::path(vers[length(vers) - 1])
old_dir <- "C:/Users/wb384996/R/win-library/" |>
fs::path(vers[length(vers)])
old <- old_dir |>
fs::dir_ls(type = "dir") |>
fs::path_file()
new_dir <- libuse |>
fs::path(vers[length(vers)])
new <- new_dir |>
fs::dir_ls(type = "dir") |>
fs::path_file()
# get only packages that are not in new
pkg <- setdiff(old, new)
ls <- pak::lib_status(lib = old_dir) |>
{\(.) .[.$package %in% pkg, ]}()
from_gh <- ls[!is.na(ls$remoteusername),] |>
{\(.) fs::path(.$remoteusername,  .$remoterepo)}()
# from CRAN
from_cran <- ls[ls$repository == "CRAN", "package"]
# get package to be installed
pkgs <- c(from_gh, from_cran) |>
{\(.) .[!is.na(.)]}()
ps_pi <- purrr::possibly(pak::pak,
otherwise = NULL)
pi    <- purrr::map(pkgs, ps_pi, ask = FALSE)
names(pi) <- pkgs
# packages that failed
pi |>
purrr::keep(is.null) |>
names()
}
install.packages(c("abc.data", "additivityTests", "Amelia", "antaresRead", "ape", "arm", "arrow", "backports", "bdsmatrix", "Benchmarking", "bib2df", "BiocManager", "bookdown", "brio", "broom", "broom.helpers", "bslib", "cachem", "callr", "candisc", "clustermq", "collapse", "coneproj", "countrycode", "cranlike", "crew", "crul", "curl", "data.table", "datamods", "datawizard", "DBI", "dbplyr", "debugme", "deldir", "digest", "drake", "DT", "duckdb", "duckplyr", "easystats", "effectsize", "emayili", "emmeans", "esquisse", "estimability", "evd", "FactoMineR", "farver", "fastmap", "fastverse", "fda", "flexclust", "flextable", "forecast", "fs", "future.apply", "gamlss", "gamlss.data", "gbRd", "gdtools", "gee", "GenBinomApps", "GENEAread", "ggdist", "ggedit", "ggfortify", "ggfun", "GGIR", "ggiraph", "GGIRread", "ggplot2", "ggraph", "ggsci", "ggside", "ggstance", "ggstatsplot", "gh", "globals", "gmodels", "graphlayouts", "gtable", "hardhat", "heplots", "highr", "Hmisc", "hrbrthemes", "htmltools", "httpuv", "httr2", "igraph", "infer", "insight", "KernSmooth", "kit", "knitr", "labelled", "lava", "leaflet", "lfe", "lintr", "lme4", "locfit", "logger", "matrixStats", "maxLik", "mclust", "mcp", "metap", "minqa", "mirai", "miselect", "mlbench", "MLmetrics", "mlr3", "mlr3misc", "multcompView", "munsell", "mvtnorm", "naniar", "nanonext", "officer", "openssl", "pak", "pamr", "parallelly", "parameters", "parsnip", "party", "performance", "phosphoricons", "pixmap", "pkgbuild", "pkgcache", "pkgdepends", "pkgdown", "plm", "plumber", "pointblank", "prismatic", "processx", "promises", "proxyC", "psych", "qpdf", "qs", "quanteda", "quantreg", "quarto", "QuickJSR", "R2jags", "radiant.data", "ragg", "randomNames", "RApiSerialize", "RcppArmadillo", "RcppEigen", "readODS", "remotes", "renv", "repr", "reticulate", "rgl", "rhub", "rio", "RMariaDB", "rmarkdown", "rsample", "rsconnect", "RSQLite", "rstan", "rstudioapi", "rticles", "sass", "secretbase", "see", "segmented", "servr", "sf", "sfsmisc", "shiny", "shinybusy", "shinytest", "shinyWidgets", "showtext", "sjmisc", "sjstats", "smacof", "sp", "sparklyr", "SparseM", "spatstat", "spatstat.explore", "spatstat.geom", "spatstat.linnet", "spatstat.model", "spatstat.random", "spData", "spdep", "spelling", "splancs", "StanHeaders", "stars", "statsExpressions", "stringi", "styler", "survey", "sysfonts", "systemfonts", "tables", "tarchetypes", "targets", "terra", "testthat", "textdata", "textshaping", "tictoc", "tidymodels", "tidyselect", "tidytext", "tinytex", "tm", "TMB", "tolerance", "tseries", "tune", "tuneR", "unitizer", "urca", "vegan", "vegan3d", "VGAM", "WikipediR", "workflowsets", "WRS2", "xaringan", "xaringanExtra", "xfun", "XLConnect", "xopen", "yardstick"))
install.packages(c("boot", "cluster", "codetools", "collapse", "foreign", "highr", "KernSmooth", "knitr", "lattice", "mgcv", "nlme", "rpart", "spatial", "survival", "textshaping"), lib="C:/Program Files/R/R-4.3.1/library")
install.packages("collapse", lib="C:/Program Files/R/R-4.3.1/library")
install.packages("collapse")
packageVersion("collapse")
install.packages(c("badger", "beepr", "biglm", "bookdown", "cli", "collapse", "correlation", "crayon", "crew", "Cubist", "datawizard", "dbscan", "digest", "downlit", "duckdb", "easystats", "effectsize", "emayili", "emmeans", "evaluate", "fields", "filehash", "forecast", "fresh", "geepack", "GGIR", "ggsci", "ggstatsplot", "goodpractice", "insight", "kit", "knitr", "leaps", "lhs", "lme4", "locfit", "loo", "markdown", "matlab", "mc2d", "mirai", "mlr", "mlr3", "mlr3misc", "modelbased", "modeldata", "MuMIn", "nanonext", "nloptr", "pamr", "paradox", "parameters", "pbkrtest", "performance", "phytools", "pkgdown", "pkgload", "PKI", "posterior", "prodlim", "ps", "psych", "QuickJSR", "RcppArmadillo", "RcppParallel", "RcppRoll", "reactR", "recipes", "ReDaMoR", "reprex", "reticulate", "rgexf", "rio", "rlang", "robustbase", "roxygen2", "rsconnect", "secretbase", "signal", "SparseM", "spatstat.data", "spatstat.sparse", "spatstat.utils", "spdep", "statsExpressions", "swagger", "tables", "targets", "TMB", "ucminf", "vitae", "waveslim", "wk", "xfun", "XML", "xts", "yaml"))
install.packages(c("cli", "collapse", "crayon", "digest", "foreign", "knitr", "pkgdown", "pkgload", "ps", "RcppParallel", "rlang", "roxygen2", "yaml"), lib="C:/Program Files/R/R-4.3.1/library")
.libPaths()
file.edit("~/.Rprofile")
.libPaths()
Sys.getenv("R_LIBS_USER")
.libPaths()
# setting library paths
# from https://milesmcbain.xyz/posts/hacking-r-library-paths/
set_lib_paths <- function(lib_vec) {
lib_vec <- normalizePath(lib_vec, mustWork = TRUE)
shim_fun <- .libPaths
shim_env <- new.env(parent = environment(shim_fun))
shim_env$.Library <- character()
shim_env$.Library.site <- character()
environment(shim_fun) <- shim_env
shim_fun(lib_vec)
}
Sys.getenv("R_LIBS_USER") |>
set_lib_paths()
.libPaths()
install.packages(c("cli", "digest", "duckdb", "gt", "joyn", "ps", "rlang", "roxygen2", "secretbase", "xfun", "yaml"))
install.packages("cli")
install.packages(c("digest", "ps", "rlang", "roxygen2", "secretbase", "xfun", "yaml"))
libuse <- Sys.getenv("R_LIBS_USER") |>
fs::path_dir()
vers <- libuse |>
fs::dir_ls(type = "dir",
recurse = FALSE) |>
fs::path_file()
old_dir  <- libuse |>
fs::path(vers[length(vers) - 1])
# old_dir <- "C:/Users/wb384996/R/win-library/" |>
#   fs::path(vers[length(vers)])
old <- old_dir |>
fs::dir_ls(type = "dir") |>
fs::path_file()
new_dir <- libuse |>
fs::path(vers[length(vers)])
new <- new_dir |>
fs::dir_ls(type = "dir") |>
fs::path_file()
# get only packages that are not in new
pkg <- setdiff(old, new)
ps_pi <- purrr::possibly(install.packages(),
otherwise = NULL)
install.packages("purrr")
ps_pi <- purrr::possibly(install.packages(),
otherwise = NULL)
local({
r <- getOption("repos")
# r["CRAN"] <- "https://cran.microsoft.com"
# r["CRAN"] <- "cran.r-project.org/"
options(repos = r)
})
ps_pi <- purrr::possibly(install.packages(),
otherwise = NULL)
ps_pi <- purrr::possibly(install.packages,
otherwise = NULL)
pi    <- purrr::map(pkg, ps_pi)
names(pi) <- pkg
pi
install.packages("tidyverse")
remotes::install_github("PIP-Technical-team/metapip@DEV")
metapip::install_pip_packages(branch = "DEV")
3
